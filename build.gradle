import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    // github
    id "co.riiid.gradle" version "0.4.2"
    // bintray
    id "com.jfrog.bintray" version "1.6"
}

// common settings
subprojects {
  apply plugin: 'java'
  apply plugin: 'jacoco'
  // apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'co.riiid.gradle'
  apply plugin: 'com.jfrog.bintray'
  apply plugin: 'maven'

  sourceCompatibility = jdkVersion
  targetCompatibility = jdkVersion
  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
  [compileJava, compileTestJava]*.options*.bootClasspath = "$JDK_HOME/jre/lib/rt.jar"

  // checkstyle {
  //  config = resources.text.fromFile("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
  //  ignoreFailures = true
  //  toolVersion = '6.16.1'
  // }

  findbugs {
    ignoreFailures = true
  }

  // Force prevent checkstyle/findbugs on Test.
  // task checkstyleTest(overwrite: true) << {}
  task findbugsTest(overwrite: true) << {}
  tasks.withType(FindBugs) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  repositories {
    jcenter()
  }

  dependencies {
    testCompile 'org.testng:testng:6.9.10'
  }

  test {
    useTestNG()
  }

  javadoc {
    options.locale = 'en_US'
  }

  task sourceJar(type: Jar) {
      from sourceSets.main.allSource
      classifier = 'sources'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
  }
  artifacts {
    if (!project.name.equals('webbook')) {
      archives jar
      archives sourceJar
      archives javadocJar
    }
  }
}

project(':eb4j-core') {
  version = projectVersion
  group = projectGroup
  bintray {
      user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
      key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
      configurations = ['archives']
      pkg {
          repo = 'maven'
          name = 'eb4j-core'
          licenses = ['LGPL-2.1']
          vcsUrl = projectUrl
          labels = ['java','EPWING', 'ebook']
          publicDownloadNumbers = true
      }
  }

 dependencies {
    compile 'commons-lang:commons-lang:2.4',
            'org.slf4j:slf4j-api:1.5.10',
            'org.slf4j:slf4j-nop:1.5.10'
  }
  task githubRelease(overwrite: true) << {}
}

project(':eb4j-tools') {
  apply plugin: 'application'
  mainClassName = 'io.github.eb4j.tool.EBZip'
  applicationName = 'ebzip'

  task createAllStartScripts() << {
       // just a placeholder
  }
  def scripts = [ 'ebdump': 'io.github.eb4j.tool.EBDump',
                  'ebinfo':'io.github.eb4j.tool.EBInfo'
  ]
  scripts.each() { scriptName, className ->
        def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
            mainClassName = className
            applicationName = scriptName
            outputDir = new File(project.buildDir, 'scripts')
            classpath = jar.outputs.files + project.configurations.runtime
        }
      applicationDistribution.into("bin") {
          from(t)
          fileMode = 0755
      }
      createAllStartScripts.dependsOn(t)
  }

  dependencies {
    compile project(':eb4j-core'),
        'commons-cli:commons-cli:1.2'
  }
  version = projectVersion
  group = projectGroup
  bintray {
      user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
      key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
      configurations = ['archives']
      pkg {
          repo = 'maven'
          name = 'eb4j-tools'
          licenses = ['LGPL-2.1']
          vcsUrl = projectUrl
          labels = ['java','EPWING', 'ebook']
          publicDownloadNumbers = true
      }
  }

  distTar {
    compression = Compression.GZIP
  }

  distributions {
      main {
          baseName = 'eb4j-tools'
          contents {
              from(javadocJar) {
                  into 'docs'
              }
              from(sourceJar) {
                  into 'source'
              }
          }
      }
  }
  task githubRelease(overwrite: true) << {}
}

project(':xml2eb') {
  version = projectVersion
  group = projectGroup
  bintray {
      user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
      key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
      configurations = ['archives']
      pkg {
          repo = 'maven'
          name = 'xml2eb'
          licenses = ['LGPL-2.1']
          vcsUrl = projectUrl
          labels = ['java','EPWING', 'ebook', 'xml']
          publicDownloadNumbers = true
      }
  }
  dependencies {
    compile project(':eb4j-core'),
            'commons-io:commons-io:1.4',
            'org.slf4j:slf4j-log4j12:1.5.10'
  }

 task githubRelease(overwrite: true) << {}
}

project(':conv-wdic') {
  apply plugin: 'application'
  mainClassName = 'io.github.eb4j.xml2eb.converter.wdic.Wdic2Xml'
  applicationName = 'conv-wdic'

  dependencies {
    compile project(':xml2eb'),
            'commons-io:commons-io:1.4',
            'commons-cli:commons-cli:1.2',
            'commons-collections:commons-collections:3.2.2'
  }
  version = projectVersion
  group = projectGroup
  bintray {
      user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
      key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
      configurations = ['archives']
      pkg {
          repo = 'maven'
          name = 'conv-wdic'
          licenses = ['LGPL-2.1']
          vcsUrl = projectUrl
          labels = ['java','EPWING', 'ebook']
          publicDownloadNumbers = true
      }
  }

  distTar {
    compression = Compression.GZIP
  }

  distributions {
      main {
          baseName = 'conv-wdic'
          contents {
              from(javadocJar) {
                  into 'docs'
              }
              from(sourceJar) {
                  into 'source'
              }
          }
      }
  }
  task githubRelease(overwrite: true) << {}
}

project(':conv-zipcode') {
  apply plugin: 'application'
  mainClassName = 'io.github.eb4j.xml2eb.converter.zipcode.ZipCode2Xml'
  applicationName = 'conv-zipcode'

  dependencies {
    compile project(':xml2eb'),
            'commons-io:commons-io:1.4',
            'commons-cli:commons-cli:1.2',
            'commons-collections:commons-collections:3.2.2'
  }
  version = projectVersion
  group = projectGroup
  bintray {
      user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
      key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
      configurations = ['archives']
      pkg {
          repo = 'maven'
          name = 'conv-zipcode'
          licenses = ['LGPL-2.1']
          vcsUrl = projectUrl
          labels = ['java','EPWING', 'ebook', 'xml', 'zipcode']
          publicDownloadNumbers = true
      }
  }

  distTar {
    compression = Compression.GZIP
  }

  distributions {
      main {
          baseName = 'conv-zipcode'
          contents {
              from(javadocJar) {
                  into 'docs'
              }
              from(sourceJar) {
                  into 'source'
              }
          }
      }
  }
  task githubRelease(overwrite: true) << {}
}

project(':webbook') {
  apply plugin: 'war'

  dependencies {
    compile project(':eb4j-core'),
          'commons-io:commons-io:1.4'

    providedCompile 'javax.servlet:servlet-api:2.5',
          'javax.servlet.jsp:jsp-api:2.1',
          'javax.servlet:jstl:1.2',
          'org.springframework:spring-webmvc:2.5.6.SEC01',
          'commons-logging:commons-logging:1.1.1',
          'org.slf4j:slf4j-api:1.5.10',
          'org.slf4j:slf4j-log4j12:1.5.10'

    testCompile 'org.springframework:spring-test:2.5.6.SEC01'
  }
  task githubRelease(overwrite: true) << {}
}

task bintrayUpload(overwrite: true) << {}

if (gradle.startParameter.taskNames.contains('bintrayUpload')  ||
    gradle.startParameter.taskNames.contains('githubRelease')) {
  apply from: 'build.publish.gradle'
}
